// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model Post1 {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
 
  
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  userType        String  @default("normal")
  isAdmin       Boolean  @default(true)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  accounts      Account[]
  sessions      Session[]

 

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)

  categoryId String?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}

// model Book {
//   id String @id @default(uuid())
//   userId String
//   title String @db.Text
//   description String? @db.Text
//   author String? @db.Text
  
//   categoryId String?


//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt


// }
model Book {
  id String @id @default(uuid())
  userId String  @default("111")
  isbn        String   @unique
  title       String
  image       String?
  author      String
  genre       String? @default("Unknown")
  published   DateTime?
  description String?
  pageCount   Int   @default(0)
  language    String   @default("")
  publisher   String?
  isAvailable Boolean   @default(true)
   price Float?
  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])
  // Add more fields as needed

  // Timestamps for created and updated
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
}

model Category {
  id String @id @default(uuid())
  name String @unique
  books Book[]
}

model Room {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}

